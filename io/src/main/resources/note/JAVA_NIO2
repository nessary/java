-------Netty的零拷贝
             ---1.DirectByteBuffer(直接内存)---read() 使用的直接内存
             ---2.自定义了xxxByteBuffer  避免了一些共有的属性和减少了创建对象的开销
                还有就是NIo中分散读取(scatter)和聚集写入(gather)的缺陷 减少了合并byteBuffer的开销
             ---3. 文件的transferTo



--------NIO的几大缺陷和netty的解决方式
                 ---JAVA的byteBuffer私有 随意更改  netty重定义了自己的byteBuffer解决了这些痛点
                 ---基于零拷贝的第二点 在jdk1.6的时代 netty作者 那时也无法解决 这是java的缺陷
                  ---著名的epoll缺陷---指 两个线程操作的时候 进行交互替换 导致 后一个线程使用了
                                 之前线程即将销毁的文件描述符(fd),导致 内存映射回调回来
                                 发生没有对应的客户端地址 ，就会客户端来说发生了 空查询 一直阻塞
                      jetty的作者 1.7是 利用timeout 当到达这个指定的时间 就重新进行
                                    遍历所有的keys 把失效的取消掉 有效的进行重新注册selector
                                    (对于epoll来说 相当于重新定义了一个文件描述符(fd)，避免了fd的冲突)
                       netty的作者 是建立在jetty基础上 增加了 索引计算的概念
                                     相当于单独开了一个线程 去监控 此刻select 如果是说selector到达规定的
                                     timeout时间的时候 不做处理继续等待并且索引增加1(是为了防止cpu等系列的问题
                                     导致确实不是发生了epoll缺陷) 当到达规定的索引计数 就会重新生成（跟上述类似
                                     利用新的替换旧的）--NioEventLoop
